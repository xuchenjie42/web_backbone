'use strict';

var fs = require('fs');
var argv = require('yargs').argv;
var uglify = require('uglify-js');

var build = {
  execute: function() {
    this.filter = [];
    
    if(argv._ && argv._.length) {
      this.filter = argv._[0].split(/,\s+/);
    }
    
    // fs.readFile('node_modules/underscore/underscore.js', function(err, data) {
    //   data = data.toString();
    //   this.preamble = data.substr(0, data.indexOf('(function')).trim() + '\n';
      this.merge(this.uglify.bind(this));
//    }.bind(this));
  },
  merge: function(callback) {
    var filter = this.filter;
    
    fs.readdir('./src', function(err, files) {
      var dest = 'underscore.js';
      
      var doneCount = 0;
      var done = function() {
        doneCount++;

        if(doneCount >= files.length) {
          callback && callback();
        }
      };

      err && console.warn(err);
      !err && files && fs.writeFile(dest, '', function(err) {
        !err && files.forEach(function(file) {
          if(/\.js/.exec(file) === null) {
            done();
            return;
          }
          
          if(filter.length && filter.indexOf(file) === -1) {
            done();
            return;
          }
          
          fs.readFile('./src/' + file, function(err, data) {
            !err && fs.appendFile(dest, data, function() {
              done();
            });
          });
        });
      });
    });
  },
  uglify: function() {
    //var preamble = this.preamble;
    
    fs.readFile('underscore.js', function(err, data) {
      !err && fs.writeFile('underscore.min.js', uglify.minify(data.toString(), {
        fromString: true,
        compress: {
          'global_defs': {
            DEBUG: false
          },
          sequences: false,
          warnings: true
        }
        // output: {
        //   preamble: preamble
        // }
      }).code);
    });
  }
};

build.execute();