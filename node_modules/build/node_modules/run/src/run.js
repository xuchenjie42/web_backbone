(function() {
  'use strict';

  var Promise = require('promise');
  var spawn = require('child_process').spawn;

  var run = function(command, options, cb) {
    options = options || {};
    options.stdio = options.stdio || 'inherit';

    var data = { stdout: null, stderr: null };
    var args = command.arguments || [];
    var log = command.name + (args && args.length ? ' ' + args.toString().replace(/,/g, ' ') : '');
    
    console.log('> ' + log);
    
    var child = spawn(command.name, args, options)
      .on('error', function(e) {
        e && console.warn(e);
        e && e.stack && console.warn(e.stack);
        cb && cb(e, data);
      })
      .on('close', function(code, signal) {
        console.log('< ' + log);
        data.code = code;
        data.signal = signal;
        cb && cb(null, data);
      });
    
    var piper = (options.stdio === 'inherit' ? process : child);
    
    piper.stdout.on('data', function(d) {
      data.stdout = d.toString();
      options.stdout && options.stdout(d);
    });
    
    piper.stderr.on('data', function(d) {
      data.stderr = d.toString();
      options.stderr && options.stderr(d);
    });
    
    options.next && options.next();

    return child;
  };

  module.exports = function(command) {
    if(typeof command === 'string') {
      command = {
        name: command
      };
    }
    
    command.arguments = command.arguments || command.args || [];
    
    var options = {};
    var cb = null;
    
    for(var i = 1, length = arguments.length; i < length; ++i) {
      var arg = arguments[i];
      
      switch(typeof arg) {
        case 'function':
          cb = arg;
          break;
        case 'object':
          if(Array.isArray(arg)) {
            command.arguments = command.arguments.concat(arg);
          } else {
            options = arg;
          }
          break;
        default:
          command.arguments.push(arg);
          break;
      }
    }

    return cb ? run(command, options, cb) : Promise.denodeify(run)(command, options);
  };
})();