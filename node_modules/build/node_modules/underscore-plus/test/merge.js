'use strict';

var _ = require('underscore');
var merge = require('../src/merge');
var chai = require('chai');
var expect = chai.expect;

chai.should();
chai.config.includeStack = true;

describe('merge', function() {
  it('empty objects', function() {
    var a = {}, b = {};
    expect(merge(a, b)).to.be.empty;
  });
  it('simple values', function() {
    var a = { a: 'a', b: 1, c: true }, b = { z: 'z', y: 2, x: false };
    expect(merge(a, b).a).to.be.equal('a');
    expect(merge(a, b).b).to.be.equal(1);
    expect(merge(a, b).c).to.be.equal(true);
    expect(merge(a, b).z).to.be.equal('z');
    expect(merge(a, b).y).to.be.equal(2);
    expect(merge(a, b).x).to.be.equal(false);
    expect(merge(a, b)).to.not.equal(a);
    expect(merge(a, b)).to.not.equal(b);
    expect(_.keys(a).length).to.be.equal(3);
    expect(_.keys(b).length).to.be.equal(3);
  });
  it('object values', function() {
    var a = { a: { a: 'a' } };
    var b = { b: { b: 'b' } };
    expect(merge(a, b)).to.have.property('a');
    expect(merge(a, b).a).to.have.property('a');
    expect(merge(a, b).a.a).to.be.equal('a');
    expect(merge(a, b)).to.have.property('b');
    expect(merge(a, b).b).to.have.property('b');
    expect(merge(a, b).b.b).to.be.equal('b');
    expect(_.keys(a).length).to.be.equal(1);
    expect(_.keys(b).length).to.be.equal(1);
  });
  it('array simple values', function() {
    var a = { a: [1, 2, 3] };
    var b = { b: [3, 2, 1] };
    expect(merge(a, b)).to.have.property('a');
    expect(merge(a, b).a).to.be.an.instanceof(Array);
    expect(merge(a, b)).to.have.property('b');
    expect(merge(a, b).b).to.be.an.instanceof(Array);
    expect(_.keys(a).length).to.be.equal(1);
    expect(_.keys(b).length).to.be.equal(1);
    expect(merge(a, b)).to.deep.equal({ a: a.a, b: b.b });
  });
  it('array duplicate keys', function() {
    var a = { a: [1, 2, 3] };
    var b = { a: [3, 2, 1] };
    expect(merge(a, b)).to.have.property('a');
    expect(merge(a, b).a).to.be.an.instanceof(Array);
    expect(merge(a, b).a.length).to.be.equal(a.a.length);
    expect(_.keys(a).length).to.be.equal(1);
    expect(_.keys(b).length).to.be.equal(1);
  });
  it('array object values', function() {
    var a = { a: [ { a: 'a' } ] };
    var b = { b: [ { b: 'b' } ] };
    expect(merge(a, b)).to.have.property('a');
    expect(merge(a, b).a).to.be.an.instanceof(Array);
    expect(merge(a, b)).to.have.property('b');
    expect(merge(a, b).b).to.be.an.instanceof(Array);
    expect(_.keys(a).length).to.be.equal(1);
    expect(_.keys(b).length).to.be.equal(1);
    expect(merge(a, b)).to.deep.equal({ a: a.a, b: b.b });
    var merged = merge(a, b);
    merged.a.push({ b: 'b' });
    expect(a.a.length).to.be.equal(1);
    expect(b.b.length).to.be.equal(1);
  });
  it('array object duplicate keys', function() {
    var a = { a: [ { a: 'a' } ] };
    var b = { a: [ { a: 'b', z: 'z' } ] };
    expect(merge(a, b)).to.have.property('a');
    expect(merge(a, b).a).to.be.an.instanceof(Array);
    expect(_.keys(a).length).to.be.equal(1);
    expect(_.keys(b).length).to.be.equal(1);
    expect(merge(a, b).a.length).to.be.equal(2);
    expect(merge(a, b)).to.deep.equal({ a: a.a.concat(b.a) });
    var merged = merge(a, b);
    merged.a.push({ b: 'b' });
    expect(a.a.length).to.be.equal(1);
    expect(b.a.length).to.be.equal(1);
  });
  it('stress', function() {
    var a = require('./json/merge.a.json');
    var b = require('./json/merge.b.json');
    var c = require('./json/merge.c.json');
    var d = require('./json/merge.d.json');
    expect(merge(a, b)).to.deep.equal(c);
    expect(merge(b, a)).to.deep.equal(c);
    expect(merge(a, c)).to.deep.equal(c);
    expect(merge(b, c)).to.deep.equal(c);
    expect(merge(c, c)).to.deep.equal(c);
    expect(merge(a, b, c)).to.deep.equal(c);
    expect(merge(a, d)).to.deep.equal(d);
  });
});