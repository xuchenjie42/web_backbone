{
  "name": "run",
  "version": "1.0.0",
  "description": "child_process.spawn wrapped and promisified",
  "author": {
    "name": "John Smith"
  },
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://ghe.am.sony.com/john-smith/run.git"
  },
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "promise": "^6.0.1"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^2.0.1"
  },
  "readme": "#run#\r\nNode's child_process.spawn wrapped and promisified.\r\n\r\n##usage##\r\n```javascript\r\n/**\r\n * @param {String|Object} command - Command to run, can also be { name: '', arguments: [] }.\r\n * @param {String...|Array} [arguments] - Arguments to pass to command/process.\r\n * @param {Object} [options] - Options to pass to child_process.spawn.\r\n * @param {Function} [callback] - Callback function to execute on error or when child process closes.\r\n * @returns {Promise|ChildProcess} - Promise if no callback provided, else ChildProcess.\r\n */\r\nrun(command: String | Object, [args...: String... | Array], [options: Object], [callback:Function]): Promise | ChildProcess\r\n```\r\n\r\n###examples###\r\n\r\n####promise####\r\n```javascript\r\nrun('ls', '-l').then(function(data) {\r\n  // do something\r\n}).catch(function(err, data) {\r\n  err && console.log(err);\r\n});\r\n```\r\n\r\n####callback####\r\n```javascript\r\nrun('ls', '-l', function(err, data) {\r\n  err && console.log(err);\r\n  // do something\r\n});\r\n```",
  "readmeFilename": "README.md",
  "_id": "run@1.0.0",
  "_shasum": "5443d4a25f327d6e575eaefa53162dc81342c3ed",
  "_resolved": "git://ghe.am.sony.com/john-smith/run.git#2ffe4b60f6199999ead6cdad133d299bcc7277cb",
  "_from": "run@git://ghe.am.sony.com/john-smith/run.git"
}
